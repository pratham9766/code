
tred = "\033[31m"
tgreen = "\033[32m"
tyellow = "\033[33m"
clr = "\033[0m"


white = ["X", "Q", "B", "K", "R", "P"]
black = ["x", "q", "b", "k", "r", "p"]
end1 = [1,9,17,25,33,41,49,57]
end2 = [8,16,24,32,40,48,56,64]
turn = 1 
valid_list = [] 
kingmove = [0,0]
check = [0,0]


# ================================================================================================================

p = {
        "a1" : "r",
        "a2" : "p",
        "a3" : " ",
        "a4" : " ",
        "a5" : " ",
        "a6" : " ",
        "a7" : "P",
        "a8" : "R",
        "b1" : "k",
        "b2" : "p",
        "b3" : " ",
        "b4" : " ",
        "b5" : " ",
        "b6" : " ",
        "b7" : "P",
        "b8" : "K",
        "c1" : "b",
        "c2" : "p",
        "c3" : " ",
        "c4" : " ",
        "c5" : " ",
        "c6" : " ",
        "c7" : "P",
        "c8" : "B",
        "d1" : "q",
        "d2" : "p",
        "d3" : " ",
        "d4" : " ",
        "d5" : " ",
        "d6" : " ",
        "d7" : "P",
        "d8" : "Q",
        "e1" : "x",
        "e2" : "p",
        "e3" : " ",
        "e4" : " ",
        "e5" : " ",
        "e6" : " ",
        "e7" : "P",
        "e8" : "X",
        "f1" : "b",
        "f2" : "p",
        "f3" : " ",
        "f4" : " ",
        "f5" : " ",
        "f6" : " ",
        "f7" : "P",
        "f8" : "B",
        "g1" : "k",
        "g2" : "p",
        "g3" : " ",
        "g4" : " ",
        "g5" : " ",
        "g6" : " ",
        "g7" : "P",
        "g8" : "K",
        "h1" : "r",
        "h2" : "p",
        "h3" : " ",
        "h4" : " ",
        "h5" : " ",
        "h6" : " ",
        "h7" : "P",
        "h8" : "R",
    }
index = {
        "a1" : 1,
        "a2" : 9,
        "a3" : 17,
        "a4" : 25,
        "a5" : 33,
        "a6" : 41,
        "a7" : 49,
        "a8" : 57,
        "b1" : 2,
        "b2" : 10,
        "b3" : 18,
        "b4" : 26,
        "b5" : 34,
        "b6" : 42,
        "b7" : 50,
        "b8" : 58,
        "c1" : 3,
        "c2" : 11,
        "c3" : 19,
        "c4" : 27,
        "c5" : 35,
        "c6" : 43,
        "c7" : 51,
        "c8" : 59,
        "d1" : 4,
        "d2" : 12,
        "d3" : 20,
        "d4" : 28,
        "d5" : 36,
        "d6" : 44,
        "d7" : 52,
        "d8" : 60,
        "e1" : 5,
        "e2" : 13,
        "e3" : 21,
        "e4" : 29,
        "e5" : 37,
        "e6" : 45,
        "e7" : 53,
        "e8" : 61,
        "f1" : 6,
        "f2" : 14,
        "f3" : 22,
        "f4" : 30,
        "f5" : 38,
        "f6" : 46,
        "f7" : 54,
        "f8" : 62,
        "g1" : 7,
        "g2" : 15,
        "g3" : 23,
        "g4" : 31,
        "g5" : 39,
        "g6" : 47,
        "g7" : 55,
        "g8" : 63,
        "h1" : 8,
        "h2" : 16,
        "h3" : 24,
        "h4" : 32,
        "h5" : 40,
        "h6" : 48,
        "h7" : 56,
        "h8" : 64
    }
def print_board():

    print(F"               ~~~~~~   BLACK   ~~~~~~             ")
    print(f"     A     B     C     D     E     F     G     H   ")
    print(f"  |=====|=====|=====|=====|=====|=====|=====|=====|")
    print(f"1 |  {p.get("a1")}  |  {p.get("b1")}  |  {p.get("c1")}  |  {p.get("d1")}  |  {p.get("e1")}  |  {p.get("f1")}  |  {p.get("g1")}  |  {p.get("h1")}  | 1")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"2 |  {p.get("a2")}  |  {p.get("b2")}  |  {p.get("c2")}  |  {p.get("d2")}  |  {p.get("e2")}  |  {p.get("f2")}  |  {p.get("g2")}  |  {p.get("h2")}  | 2")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"3 |  {p.get("a3")}  |  {p.get("b3")}  |  {p.get("c3")}  |  {p.get("d3")}  |  {p.get("e3")}  |  {p.get("f3")}  |  {p.get("g3")}  |  {p.get("h3")}  | 3")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"4 |  {p.get("a4")}  |  {p.get("b4")}  |  {p.get("c4")}  |  {p.get("d4")}  |  {p.get("e4")}  |  {p.get("f4")}  |  {p.get("g4")}  |  {p.get("h4")}  | 4")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"5 |  {p.get("a5")}  |  {p.get("b5")}  |  {p.get("c5")}  |  {p.get("d5")}  |  {p.get("e5")}  |  {p.get("f5")}  |  {p.get("g5")}  |  {p.get("h5")}  | 5")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"6 |  {p.get("a6")}  |  {p.get("b6")}  |  {p.get("c6")}  |  {p.get("d6")}  |  {p.get("e6")}  |  {p.get("f6")}  |  {p.get("g6")}  |  {p.get("h6")}  | 6")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"7 |  {p.get("a7")}  |  {p.get("b7")}  |  {p.get("c7")}  |  {p.get("d7")}  |  {p.get("e7")}  |  {p.get("f7")}  |  {p.get("g7")}  |  {p.get("h7")}  | 7")
    print(f"  |-----|-----|-----|-----|-----|-----|-----|-----|")
    print(f"8 |  {p.get("a8")}  |  {p.get("b8")}  |  {p.get("c8")}  |  {p.get("d8")}  |  {p.get("e8")}  |  {p.get("f8")}  |  {p.get("g8")}  |  {p.get("h8")}  | 8")
    print(f"  |=====|=====|=====|=====|=====|=====|=====|=====|")
    print(f"     A     B     C     D     E     F     G     H   ")

    print(f"               ~~~~~~   WHITE   ~~~~~~             ")

# =================================================================================================================

def undo(mov, plac):
    a = p.get(mov)
    p.update({ mov : a})
    p.update({ plac : " "})    
def movepiece(mov, plac):
    a = p.get(mov)
    p.update({ mov : " "})
    p.update({ plac : a} )
def pawnupgrade():
    if pc_mov == "P":
        if idx_plc in range(1, 9):
            ask = input(f"\n    {tyellow} ENTER PIECE TO UPGRADE : {clr}").upper()
            if ask in ["Q","B","K","R"]:
                p.update({ plac : ask})
            else:
                print("CAN'T PLACE THIS PIECE")
                pawnupgrade()
    if pc_mov == "p":
        if idx_plc in range(57, 65):
            ask = input(f"\n     {tyellow}ENTER PIECE TO UPGRADE : {clr}").lower()
            if ask in ["q","b","k","r"]:
                p.update({ plac : ask})
            else:
                print("CAN'T PLACE THIS PIECE")
                pawnupgrade()
def castling(mov,plac):
    if p.get(mov) == "X":
        if kingmove[0] < 1:
            if index.get(plac) == 63:
                p.update({ "h8" : " "})
                p.update({ "f8" : "R"})
            if index.get(plac) == 59:
                p.update({ "a8" : " "})
                p.update({ "d8" : "R"})
            return True
    elif p.get(mov) == "x":
        if kingmove[1] < 1:
            if index.get(plac) == 7:
                p.update({ "h1" : " "})
                p.update({ "f1" : "R"})
            if index.get(plac) == 3:
                p.update({ "a1" : " "})
                p.update({ "d1" : "R"})
            return True
    else:
        return False
def empasant():
    pass

# =================================================================================================================

def in_valid(valid_list,a,b,c,d):

    plist = list(p.values())
    idxlist = list(index.values())
    rlist = []
    olist = []
    direction = [a,b,c,d]
    clr = [black,white]
    for i in range(63):
        if plist[i] in clr[turn]:
            rlist.append(idxlist[i]) 
        if plist[i] in clr[1-turn]:
            olist.append(idxlist[i])
    for k, sublist in enumerate(direction):
        x = sublist
        for j in range(len(x)):
            if idx_plc in end1 or idx_plc in end2:
                if x[j] in rlist:
                    break
                elif x[j] in olist:
                    valid_list.append(x[j])
                    break
                else:
                    valid_list.append(x[j])
            else:
                if x[j] in rlist:
                    break
                elif x[j] in olist or x[j] in end1 or x[j] in end2:
                    valid_list.append(x[j])
                    break
                else:
                    valid_list.append(x[j])
    
def Queenspecial(valid_list,a,b,c,d,e,f,g,h):

    plist = list(p.values())
    idxlist = list(index.values())
    rlist = []
    olist = []  
    direction = [a,b,c,d,e,f,g,h]
    clr = [black,white]
    for i in range(63):
        if plist[i] in clr[turn]:
            rlist.append(idxlist[i])
        if plist[i] in clr[1-turn]:
            olist.append(idxlist[i])        
    for k, sublist in enumerate(direction):
        x = sublist
        for j in range(len(x)):
            if idx_plc in end1 or idx_plc in end2:
                if x[j] in rlist:
                    break
                elif x[j] in olist:
                    valid_list.append(x[j])
                    break
                else:
                    valid_list.append(x[j])
            else:
                if x[j] in rlist:
                    break
                elif x[j] in olist or x[j] in end1 or x[j] in end2:
                    valid_list.append(x[j])
                    break
                else:
                    valid_list.append(x[j])

def valid_move(mov, plac):
    
    pc_mov = p.get(mov)
    pc_plc = p.get(plac)
    idx_mov = int(index.get(mov))
    idx_plc= int(index.get(plac))

    # WHITE PAWN
    if pc_mov == "P":
        if p.get(idx_plc-9) in black or p.get(idx_plc+7) in black :
            return True
        elif (49 <= idx_mov) and (idx_mov <= 56) and (pc_plc) == " ":
            if idx_plc in [idx_mov-8, idx_mov-16]:     
                return True
        elif idx_plc in [idx_mov-8] and (pc_plc) == " ":
            return True
        # BLACK PAWN
    elif pc_mov == "p":
        if p.get(idx_plc+9) in white or p.get(idx_plc+7) in white :
            return True
        elif (9 <= idx_mov) and (idx_mov <= 16) and (pc_plc) == " ":
            if idx_plc in [idx_mov+8, idx_mov+16]:     
                return True
        elif idx_plc in [idx_mov+8] and (pc_plc) == " ":
            return True
        
    # White KING
    elif pc_mov == "X":
        kingmove[0] = kingmove[0] + 0.5
        if pc_plc in white:
            return False
        if idx_plc in [idx_mov+2, idx_mov-2]:
            if castling(mov,plac):
                return True
        elif idx_plc in [idx_mov+1, idx_mov-1, idx_mov+9, idx_mov+8, idx_mov+7, idx_mov-9, idx_mov-8, idx_mov-7]:
            return True
        elif pc_plc in black:
            return True
        # BLACK KING
    elif pc_mov == "x":
        kingmove[1] = kingmove[1] + 0.5
        if pc_plc in black:
            return False
        elif idx_plc in [idx_mov+2, idx_mov-2]:
            if castling(mov,plac) == True:
                return True
        elif idx_plc in [idx_mov+1, idx_mov-1, idx_mov+9, idx_mov+8, idx_mov+7, idx_mov-9, idx_mov-8, idx_mov-7]:
            return True
        elif pc_plc in white:
            return True

    # WHITE KNIGHT
    elif pc_mov == "K":
        list = [idx_mov+6, idx_mov+10, idx_mov+15, idx_mov+17, idx_mov-6, idx_mov-10, idx_mov-15, idx_mov-17]
        # K_filtered_dict = list({k: ch for k, ch in index.items() if idx_plc in list}.values())
        if idx_plc in list:
            if pc_plc == " ":
                return True
            elif pc_plc in black:
                return True
        # BLACK KNIGHT  
    elif pc_mov == "k":
        list = [idx_mov+6, idx_mov+10, idx_mov+15, idx_mov+17, idx_mov-6, idx_mov-10, idx_mov-15, idx_mov-17]
        # k_filtered_dict = list({k: ch for k, ch in index.items() if idx_plc in list}.values())
        if idx_plc in list:
            if pc_plc == " ":
                return True
            elif pc_plc in white:
                return True
                 
    # WHITE ROOK
    elif pc_mov == "R":
        # filtered_list = [{k: ch for k, ch in index.items() if k.startswith(mov[0]) or k.endswith(mov[1])}.values()]
        a = [(idx_mov - (8*i)) for i in range(1,9)]
        b = [(idx_mov + (8*i)) for i in range(1,9)]
        c = [(idx_mov - i) for i in range(1,9)]
        d = [(idx_mov + i) for i in range(1,9)]
        in_valid(valid_list, a, b, c, d)
        if idx_plc in valid_list:
            if mov[0] == plac[0] or mov[1] == plac[1]:
                if pc_plc == " ":
                    return True
                elif pc_plc in black:
                    return True
        # BLACK ROOK
    elif pc_mov == "r":
        a = [(idx_mov - (8*i)) for i in range(1,9)]
        b = [(idx_mov + (8*i)) for i in range(1,9)]
        c = [(idx_mov - i) for i in range(1,9)]
        d = [(idx_mov + i) for i in range(1,9)]
        in_valid(valid_list, a, b, c, d)
        if idx_plc in valid_list:
            if mov[0] == plac[0] or mov[1] == plac[1]:
                if pc_plc == " ":
                    return True
                elif pc_plc in white:
                    return True
            
    # WHITE BISHOP
    elif pc_mov == "B":
        a = [(idx_mov + ((8*i)+i)) for i in range(1, 8)]
        b = [(idx_mov + ((8*i)-i)) for i in range(1, 8)]
        c = [(idx_mov - ((8*i)+i)) for i in range(1, 8)]
        d = [(idx_mov - ((8*i)-i)) for i in range(1, 8)]
        in_valid(valid_list, a, b, c, d)
        if idx_plc in valid_list:
            if pc_plc == " ":
                return True
            elif pc_plc in black:
                return True
            
                
        # BLACK BISHOP
    elif pc_mov == "b":
        a = [(idx_mov + ((8*i)+i)) for i in range(1, 8)]
        b = [(idx_mov + ((8*i)-i)) for i in range(1, 8)]
        c = [(idx_mov - ((8*i)+i)) for i in range(1, 8)]
        d = [(idx_mov - ((8*i)-i)) for i in range(1, 8)]
        in_valid(valid_list, a, b, c, d)
        if idx_plc in valid_list:
            if pc_plc == " ":
                return True
            elif pc_plc in white:
                return True

    # WHITE QUEEN        
    elif pc_mov == "Q":
        a = [(idx_mov + ((8*i)+i)) for i in range(1, 8)]
        b = [(idx_mov + ((8*i)-i)) for i in range(1, 8)]
        c = [(idx_mov - ((8*i)+i)) for i in range(1, 8)]
        d = [(idx_mov - ((8*i)-i)) for i in range(1, 8)]
        e = [(idx_mov - (8*i)) for i in range(1,9)]
        f = [(idx_mov + (8*i)) for i in range(1,9)]
        g = [(idx_mov - i) for i in range(1,9)]
        h = [(idx_mov + i) for i in range(1,9)]
        Queenspecial(valid_list,a,b,c,d,e,f,g,h)
        if idx_plc in valid_list:
            # if mov[0] == plac[0] or mov[1] == plac[1]:
                if pc_plc == " ":
                    return True
                elif pc_plc in black:
                    return True
        # BLACK QUEEN
    elif pc_mov == "q":
        # q_filtered_dict = list({k: ch for k, ch in index.items() if mov[0]==plac[0] or mov[1]==plac[1] or idx_plc in a or idx_plc in b or idx_plc in c or idx_plc in d}.values())
        a = [(idx_mov + ((8*i)+i)) for i in range(1, 8)]
        b = [(idx_mov + ((8*i)-i)) for i in range(1, 8)]
        c = [(idx_mov - ((8*i)+i)) for i in range(1, 8)]
        d = [(idx_mov - ((8*i)-i)) for i in range(1, 8)]
        e = [(idx_mov - (8*i)) for i in range(1,9)]
        f = [(idx_mov + (8*i)) for i in range(1,9)]
        g = [(idx_mov - i) for i in range(1,9)]
        h = [(idx_mov + i) for i in range(1,9)]
        Queenspecial(valid_list,a,b,c,d,e,f,g,h)
        if idx_plc in valid_list:
            # if mov[0] == plac[0] or mov[1] == plac[1]:
                if pc_plc == " ":
                    return True
                elif pc_plc in white:
                    return True
    
    return False            

# =================================================================================================================

def checkmate():
    pass

def checkforcheck():
    plist = list(p.values())
    idxlist = list(index.values())
    color = [white,black]
    rlist = []
    olist = []
    valid = []
    valid1 = []
    for i in range(64):
        if plist[i] == "X":
            X = idxlist[i]
        if plist[i] == "x":
            x = idxlist[i]
    li = [X,x]
    for z in range(2):
        for i in range(64):
            if plist[i] in color[z]:
                rlist.append(idxlist[i]) 
            if plist[i] in color[1-z]:
                olist.append(idxlist[i])
        a = [(li[z] - (8*i)) for i in range(1,9)]
        m = [(li[z] + (8*i)) for i in range(1,9)]
        c = [(li[z] - i) for i in range(1,9)]
        d = [(li[z] + i) for i in range(1,9)]
        e = [(li[z] + ((8*i)+i)) for i in range(1, 8)]
        f = [(li[z] + ((8*i)-i)) for i in range(1, 8)]
        g = [(li[z] - ((8*i)+i)) for i in range(1, 8)]
        h = [(li[z] - ((8*i)-i)) for i in range(1, 8)]
        u = [li[1-z]+6, li[1-z]+10, li[1-z]+15, li[1-z]+17, li[1-z]-6, li[1-z]-10, li[1-z]-15, li[1-z]-17]
        direction = [a,m,c,d,e,f,g,h]
        for l,x in enumerate(direction):
            for j in range(len(x)):
                if x[j] <= 64 and x[j] > 0:
                    if x[j] in rlist:
                        break
                    elif x[j] in olist or x[j] in end2 or x[j] in end1:
                        valid1.append(x[j])
                        break
                    else:
                        valid1.append(x[j])
            
        for k in range(64):
            if idxlist[k] in valid1:
                valid.append(plist[k])
        # print(f"{z} : {valid1}")
        # print(f"{z} : {valid}")
        if z == 0:
            if ("q" in valid) or ("r" in valid) or ("b" in valid) or ("k" in u):
                check[0] = 1
                print(valid)
                print(f"\n       {tred} =====================================")
                print(f"        ||  IT'S CHECK FOR :  ~~ WHITE ~~ ||")
                print(f"        ====================================={clr}")
        elif z == 1:
            check[1] = 1
            if ("Q" in valid) or ("R" in valid) or ("B" in valid) or ("K" in u):
                print(f"\n       {tred} =====================================")
                print(f"        ||   IT'S CHECK FOR :  ~~ BLACK ~~ ||")
                print(f"        ====================================={clr}")
        else:
            check[0] = 0
            check[1] = 0
        rlist.clear()
        olist.clear()
        valid1.clear()
        valid.clear()

def gameover():
    pglist = list(p.values())
    if "X" not in pglist:
        print(f"{tgreen}=========================")
        print(f"||      BLACK WON      ||")
        print(f"========================={clr}")
        a = input("WANT TO  AGAIN [y/n]: ")
        if a == "y":
            print_board()
        elif a == "n":
            print(f"         ~~  THANK YOU  ~~")
    elif "x" not in pglist:
        print(f"{tgreen}=========================")
        print(f"||      WHITE WON      ||")
        print(f"========================={clr}")
        a = input("WANT TO PLAY AGAIN [y/n]: ")
        if a == "y":
            print_board()
        elif a == "n":
            print(f"         ~~  THANK YOU  ~~")
    else:
        pglist.clear()

# =================================================================================================================
def custom():
    moves = [
        ("a1", "f3"),
        ("a7", "a2")
    ]
    for i in moves:
        p[i[1]] = p[i[0]]
        p[i[0]] = " "
# custom()

# ==================================================================================================================
while True:
    print_board()

    if turn == 1:
        print("white turn")
    else:
        print("black turn")

    mov = input("SELECT PIECE : ")
    plac = input("ENTER PLACE POSITION : ")
    pc_mov = p.get(mov)
    idx_plc = index.get(plac)
    # if mov == "undo" or plac == "undo":

   # ========================================
    try:
        if valid_move(mov, plac) == True:
            movepiece(mov, plac)
            pawnupgrade()
            turn = 1-turn
            valid_list.clear()
        else:
            print(f"\n              {tred} ~~ NOT A VALID MOVE! ~~ {clr}")

        # ====== CHECK FOR CHECK =======
        gameover()
        checkforcheck()

    except TypeError as w:
        print(f"\n            {tred}   ENTER A VALID POSITION{clr}")


